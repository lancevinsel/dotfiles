#+title Emacs Setup
#+PROPERTY: header-args:emacs-lisp :tangle ./init-new.el

* Desktop Setup

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  (setq visible-bell t)         ; Set up visible bell
  (scroll-bar-mode -1) 		; disable visible scrollbar
  (tool-bar-mode -1) 		; disable the toolbar 
  (tooltip-mode -1) 		; disable tooltips
  (set-fringe-mode 10) 		; give some breathing room?
  (menu-bar-mode -1) 		; disable the menu bar
  (column-number-mode)
  (global-display-line-numbers-mode t)

#+end_src

* Fonts

#+begin_src emacs-lisp

  ;; UTF-8 as default encoding
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-keyboard-coding-system 'utf-8-unix)

  ;; do this especially on Windows, else python output problem
  (set-terminal-coding-system 'utf-8-unix)

  (defvar lav/default-font-size 100)
  (defvar lav/default-variable-font-size 100)

  (set-face-attribute 'default nil :font "Fira Code Retina") 
  (set-face-attribute 'default nil :font "Fira Code Retina" :height lav/default-font-size) 
  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height lav/default-font-size)
  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height lav/default-variable-font-size :weight 'regular)

#+end_src

* Key map

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)

  (define-key emacs-lisp-mode-map (kbd "C-c C-c") #'lav-elisp-mode-eval-buffer)
  (define-key lisp-interaction-mode-map (kbd "C-c C-c") #'lav-elisp-mode-eval-buffer)

#+end_src

* Package/Use-package Setup

#+begin_src emacs-lisp

  ;; Initialize package sources

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* line numbers

#+begin_src emacs-lisp

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
      		term-mode-hook
		shell-mode-hook
		eshell-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

* Added by custom

#+begin_src emacs-lisp

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(forge evil-magit magit counsel-projectile projectile hydra evil-collection evil general all-the-icons doom-themes helpful counsel ivy-rich which-key rainbow-delimiters doom-modeline ivy use-package)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

#+end_src

* ivy

#+begin_src emacs-lisp
  (use-package ivy
	       :diminish
	       :bind (("C-s" . swiper)
		      :map ivy-minibuffer-map
		      ("TAB" . ivy-alt-done)
		      ("C-l" . ivy-alt-done)
		      ("C-j" . ivy-next-line)
		      ("C-k" . ivy-previous-line)
		      :map ivy-switch-buffer-map
		      ("C-k" . ivy-previous-line)
		      ("C-l" . ivy-done)
		      ("C-d" . ivy-switch-buffer-kill)
		      :map ivy-reverse-i-search-map
		      ("C-k" . ivy-previous-line)
		      ("C-d" . ivy-reverse-i-search-kill))
	       :config
	       (setq ivy-use-virtual-buffers t
		      ivy-count-format "%d/%d ")
  )

  (use-package ivy-rich
	       :init
	       (ivy-rich-mode 1))

  (use-package counsel
	       :bind (("M-x" . counsel-M-x)
		      ("C-x b" . counsel-ibuffer)
		      ("C-x C-f" . counsel-find-file)
	      :map minibuffer-local-map
		      ("C-r" . 'counsel-minibuffer-history)))
#+end_src

* Modeline 

#+begin_src emacs-lisp

(use-package all-the-icons)

(use-package doom-modeline
	     :init (doom-modeline-mode 1)
	     :custom (doom-modeline-height 15))
		    
(use-package doom-themes
	     :init (load-theme 'doom-dracula t))

(use-package rainbow-delimiters
	     :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Whichkey

#+begin_src emacs-lisp

(use-package which-key
	     :init (which-key-mode)
	     :diminish which-key-mode
	     :config
	     (setq which-key-idle-delay 0.3))

#+end_src

* Helpful

#+begin_src emacs-lisp

(use-package helpful
	     :custom
	     (counsel-describe-function-function #'helpful-callable)
	     (counsel-describe-varible-function #'helpful-variable)
	     :bind
	     ([remap describe-function] . counsel-describe-function)
	     ([remap describe-command] . helpful-command)
	     ([remap describe-variable] . counsel-describe-variable)
	     ([remap describe-key] . helpful-key))

#+end_src

* Evaluate

#+begin_src emacs-lisp
(defun lav-elisp-mode-eval-buffer ()
  (interactive)
  (message "Evaluated buffer")
  (eval-buffer))

#+end_src

* general

#+begin_src emacs-lisp

  (use-package general
    :config
      (general-create-definer lav/leader-keys
	:keymaps '(normal insert visual emacs)
	:prefix "SPC"
	:global-prefix "C-SPC")
      (lav/leader-keys
	"t" '(:ignore t :which-key "toggles")
	"tt" '(counsel-load-theme :which-key "choose theme")))

#+end_src

* EVIL

#+begin_src emacs-lisp

  (defun lav/evil-hook ()
    (dolist (mode '(custom-mode
		    eshell-mode
		    git-rebase-mode
		    erc-mode
		    circe-server-mode
		    circe-chat-mode
		    circe-query-mode
		    sauron-mode
		    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
	       :init
	       (setq evil-want-integration t)
	       (setq evil-want-keybinding nil)
	       (setq evil-want-C-u-scroll t)
	       (setq evil-want-C-i-jump nil)
	       :hook (evil-mode . lav/evil-hook)
	       :config
	       (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	       (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

	       (evil-global-set-key 'motion "j" 'evil-next-visual-line)
	       (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

	       (evil-set-initial-state 'messages-buffer-mode 'normal)
	       (evil-set-initial-state 'dashboard-mode 'normal))

  (require 'evil)
  (evil-mode 1)

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* Hydra

#+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (lav/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

* Magit

#+begin_src emacs-lisp

  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

* Forge

#+begin_src emacs-lisp

  (use-package forge)

#+end_src

* Org

#+begin_src emacs-lisp

  (defun lav/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)

  (use-package org
    :hook (org-mode . lav/org-mode-setup)
    :config
    (setq org-ellipsis " ▼"
	  org-hide-emphasis-markers t))

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun lav/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . lav/org-mode-visual-fill))

#+end_src

* Babel

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
       '((emacs-lisp . t)
	 (python . t)
	 (bash . t)))

  (setq org-confirm-babel-evaluate nil)

  (with-eval-after-load 'org
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

  ;; Automatically tangle our Emacs.org config file when we save it

  (defun lav/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
			(expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'lav/org-babel-tangle-config)))+begin_src emacs-lisp

#+end_src
